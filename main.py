#!/usr/bin/env python3
"""
MirrorDroid - GUI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è scrcpy
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import logging
import os
import sys

from PyQt5.QtWidgets import QApplication, QMessageBox

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ui.main_window import MainWindow
from core.utils import enable_windows_console, is_debug_mode, debug_print


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    import subprocess
    import platform

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –û–° –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏
    system = platform.system().lower()
    app_dir = os.path.join(os.path.dirname(__file__), 'app')

    if system == 'windows':
        adb_path = os.path.join(app_dir, 'win', 'adb.exe')
        scrcpy_path = os.path.join(app_dir, 'win', 'scrcpy.exe')
    else:  # linux, darwin, etc.
        adb_path = os.path.join(app_dir, 'linux', 'adb')
        scrcpy_path = os.path.join(app_dir, 'linux', 'scrcpy')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ adb
    if not os.path.exists(adb_path):
        return False, f"–õ–æ–∫–∞–ª—å–Ω—ã–π adb –Ω–µ –Ω–∞–π–¥–µ–Ω: {adb_path}"

    if not os.access(adb_path, os.X_OK):
        os.chmod(adb_path, 0o755)  # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ scrcpy
    if not os.path.exists(scrcpy_path):
        return False, f"–õ–æ–∫–∞–ª—å–Ω—ã–π scrcpy –Ω–µ –Ω–∞–π–¥–µ–Ω: {scrcpy_path}"

    if not os.access(scrcpy_path, os.X_OK):
        os.chmod(scrcpy_path, 0o755)  # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å adb
    try:
        result = subprocess.run([adb_path, 'version'], capture_output=True, text=True, timeout=5)
        if result.returncode != 0:
            return False, "–õ–æ–∫–∞–ª—å–Ω—ã–π adb –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    except (subprocess.TimeoutExpired, FileNotFoundError):
        return False, "–õ–æ–∫–∞–ª—å–Ω—ã–π adb –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å scrcpy
    try:
        result = subprocess.run([scrcpy_path, '--version'], capture_output=True, text=True, timeout=5)
        if result.returncode != 0:
            return False, "–õ–æ–∫–∞–ª—å–Ω—ã–π scrcpy –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    except (subprocess.TimeoutExpired, FileNotFoundError):
        return False, "–õ–æ–∫–∞–ª—å–Ω—ã–π scrcpy –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"

    return True, "–õ–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç"


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
    DEBUG = is_debug_mode()
    if DEBUG:
        os.environ['MIRRORDROID_DEBUG'] = '1'
        logging.basicConfig(level=logging.DEBUG, format='[%(levelname)s] %(message)s')
        enable_windows_console()
        debug_print("üîß Debug mode enabled")
    else:
        logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = QApplication(sys.argv)
    app.setApplicationName("MirrorDroid")
    app.setApplicationVersion("1.0")
    app.setOrganizationName("MirrorDroid")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps_ok, deps_message = check_dependencies()
    if not deps_ok:
        QMessageBox.critical(None, "–û—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", deps_message)
        sys.exit(1)

    try:
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        main_window = MainWindow()
        main_window.show()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        sys.exit(app.exec_())

    except Exception as e:
        QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n{str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()
