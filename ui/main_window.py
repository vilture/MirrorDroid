import os
import sys

from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QFont, QIcon
from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QLabel, QLineEdit, QPushButton, QScrollArea,
                             QMessageBox, QStatusBar, QFrame, QCheckBox)

from core.adb_manager import AdbManager
from core.config_manager import ConfigManager
from core.localization import LocalizationManager
from core.scrcpy_manager import ScrcpyManager
from core.utils import debug_print, get_icon_path
from ui.device_widget import DeviceWidget
from ui.settings_dialog import SettingsDialog

# –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
APP_VERSION = "1.0.1"


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        super().__init__()
        self.init_managers()
        self.init_ui()
        self.setup_connections()
        self.load_settings()
        self.refresh_devices()

    def init_managers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ config.json —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º
        if getattr(sys, 'frozen', False):
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø–∞–∫–æ–≤–∞–Ω–æ PyInstaller
            config_path = os.path.join(os.path.dirname(sys.executable), 'config.json')
        else:
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
            config_path = os.path.join(os.path.dirname(__file__), '..', 'config.json')

        debug_print(f"üìÅ Path to config.json: {config_path}")
        self.config_manager = ConfigManager(config_path)
        self.localization_manager = LocalizationManager(self.config_manager)
        self.adb_manager = AdbManager()
        self.scrcpy_manager = ScrcpyManager()

        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_timer = QTimer()
        self.refresh_timer.timeout.connect(self.refresh_devices)
        self.refresh_timer.start(5000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle(self.localization_manager.tr("app_title"))
        self.setGeometry(100, 100, 1000, 700)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –æ–∫–Ω–∞
        icon_path = get_icon_path()
        if os.path.exists(icon_path):
            self.setWindowIcon(QIcon(icon_path))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏—é "–ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω"
        if self.config_manager.get_app_setting("always_on_top", True):
            self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        self.create_menu_bar()

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.create_toolbar(main_layout)

        # –û–±–ª–∞—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.create_devices_area(main_layout)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar()

    def create_menu_bar(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ–Ω—é"""
        pass

    def create_toolbar(self, parent_layout):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        toolbar_frame = QFrame()
        toolbar_frame.setFrameStyle(QFrame.StyledPanel)
        toolbar_layout = QHBoxLayout()
        toolbar_frame.setLayout(toolbar_layout)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_button = QPushButton(self.localization_manager.tr("refresh"))
        self.refresh_button.clicked.connect(self.refresh_devices)
        self.refresh_button.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 3px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5a6268;
            }
        """)
        toolbar_layout.addWidget(self.refresh_button)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ IP:–ø–æ—Ä—Ç
        toolbar_layout.addWidget(QLabel(self.localization_manager.tr("ip_label")))
        self.ip_input = QLineEdit()
        self.ip_input.setPlaceholderText("192.168.1.1:5555")
        self.ip_input.setMaximumWidth(180)
        toolbar_layout.addWidget(self.ip_input)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connect_button = QPushButton(self.localization_manager.tr("connect"))
        self.connect_button.clicked.connect(self.connect_device)
        self.connect_button.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 3px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #218838;
            }
        """)
        toolbar_layout.addWidget(self.connect_button)

        # –ö–Ω–æ–ø–∫–∞ QR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.qr_connect_button = QPushButton(self.localization_manager.tr("qr_connect"))
        self.qr_connect_button.clicked.connect(self.show_qr_connection)
        self.qr_connect_button.setStyleSheet("""
            QPushButton {
                background-color: #17a2b8;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 3px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #138496;
            }
        """)
        toolbar_layout.addWidget(self.qr_connect_button)

        # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.auto_refresh_check = QCheckBox(self.localization_manager.tr("auto_refresh"))
        self.auto_refresh_check.setChecked(True)
        self.auto_refresh_check.toggled.connect(self.toggle_auto_refresh)
        toolbar_layout.addWidget(self.auto_refresh_check)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_button = QPushButton(self.localization_manager.tr("settings"))
        self.settings_button.clicked.connect(self.show_scrcpy_settings)
        self.settings_button.setStyleSheet("""
            QPushButton {
                background-color: #6f42c1;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 3px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5a32a3;
            }
        """)
        toolbar_layout.addWidget(self.settings_button)

        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö scrcpy
        self.stop_all_button = QPushButton(self.localization_manager.tr("stop_all"))
        self.stop_all_button.clicked.connect(self.stop_all_scrcpy)
        self.stop_all_button.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 3px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c82333;
            }
        """)
        toolbar_layout.addWidget(self.stop_all_button)

        toolbar_layout.addStretch()

        parent_layout.addWidget(toolbar_frame)

    def create_devices_area(self, parent_layout):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.devices_widget = QWidget()
        self.devices_layout = QVBoxLayout()
        self.devices_widget.setLayout(self.devices_layout)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(self.localization_manager.tr("devices_title"))
        title_label.setFont(QFont("Arial", 12, QFont.Bold))
        title_label.setStyleSheet("color: #333; margin: 10px;")
        self.devices_layout.addWidget(title_label)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.devices_container = QWidget()
        self.devices_container_layout = QVBoxLayout()
        self.devices_container.setLayout(self.devices_container_layout)
        self.devices_layout.addWidget(self.devices_container)

        self.devices_layout.addStretch()
        self.scroll_area.setWidget(self.devices_widget)
        parent_layout.addWidget(self.scroll_area)

        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    def create_status_bar(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ä"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.devices_status = QLabel(self.localization_manager.tr("devices_status", count=0))
        self.status_bar.addWidget(self.devices_status)

        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö scrcpy
        self.scrcpy_status = QLabel(self.localization_manager.tr("scrcpy_status", count=0))
        self.status_bar.addWidget(self.scrcpy_status)

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status = QLabel("")
        self.status_bar.addPermanentWidget(self.connection_status)

        # –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤ –ø—Ä–∞–≤–æ–º —É–≥–ª—É)
        self.version_label = QLabel(self.localization_manager.tr("version", version=APP_VERSION))
        self.version_label.setStyleSheet("color: #666; font-size: 11px;")
        self.status_bar.addPermanentWidget(self.version_label)

    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # ADB Manager
        self.adb_manager.device_list_changed.connect(self.on_devices_changed)

        # Scrcpy Manager
        self.scrcpy_manager.process_started.connect(self.on_scrcpy_started)
        self.scrcpy_manager.process_finished.connect(self.on_scrcpy_finished)
        self.scrcpy_manager.process_error.connect(self.on_scrcpy_error)
        self.scrcpy_manager.stderr_output.connect(self.on_scrcpy_stderr)

        # –£–±–∏—Ä–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Network Scanner

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        saved_devices = self.config_manager.get_devices()
        for device in saved_devices:
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
            pass

    def refresh_devices(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        devices = self.adb_manager.get_devices()
        self.update_devices_display(devices)
        self.update_status()

    def update_devices_display(self, devices):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∏–¥–∂–µ—Ç—ã
        for i in reversed(range(self.devices_container_layout.count())):
            child = self.devices_container_layout.itemAt(i).widget()
            if child:
                child.setParent(None)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–∏–¥–∂–µ—Ç—ã
        for device in devices:
            device_widget = DeviceWidget(device, self.scrcpy_manager.is_scrcpy_running(device['id']),
                                         self.localization_manager)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            device_widget.start_scrcpy.connect(self.start_scrcpy)
            device_widget.stop_scrcpy.connect(self.stop_scrcpy)
            device_widget.disconnect_device.connect(self.disconnect_device)
            device_widget.remove_device.connect(self.remove_device)
            device_widget.configure_device.connect(self.configure_device)
            device_widget.start_camera.connect(self.start_camera)

            self.devices_container_layout.addWidget(device_widget)

        # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not devices:
            no_devices_label = QLabel(self.localization_manager.tr("no_devices"))
            no_devices_label.setAlignment(Qt.AlignCenter)
            no_devices_label.setStyleSheet("color: #666; font-size: 14px; padding: 20px;")
            self.devices_container_layout.addWidget(no_devices_label)

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.devices_container.update()
        self.scroll_area.update()

    def start_scrcpy(self, device_id):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç scrcpy –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        settings = self.config_manager.get_device_settings(device_id)

        # –ó–∞–ø—É—Å–∫–∞–µ–º scrcpy
        success = self.scrcpy_manager.start_scrcpy(device_id, settings)

        if not success:
            QMessageBox.warning(self, self.localization_manager.tr("messages.error"),
                                self.localization_manager.tr("messages.scrcpy_start_failed", device_id=device_id))
        else:
            self.status_bar.showMessage(self.localization_manager.tr("messages.scrcpy_started", device_id=device_id),
                                        3000)

    def stop_scrcpy(self, device_id):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç scrcpy –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        success = self.scrcpy_manager.stop_scrcpy(device_id)
        if success:
            self.status_bar.showMessage(self.localization_manager.tr("messages.scrcpy_stopped", device_id=device_id),
                                        3000)

    def stop_all_scrcpy(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã scrcpy"""
        self.scrcpy_manager.stop_all_scrcpy()
        self.status_bar.showMessage(self.localization_manager.tr("messages.all_scrcpy_stopped"), 3000)
        self.refresh_devices()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

    def connect_device(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –ø–æ IP:–ø–æ—Ä—Ç"""
        input_text = self.ip_input.text().strip()
        if not input_text:
            QMessageBox.warning(self, self.localization_manager.tr("messages.error"),
                                self.localization_manager.tr("messages.enter_ip"))
            return

        # –ü–∞—Ä—Å–∏–º IP:–ø–æ—Ä—Ç
        if ':' in input_text:
            parts = input_text.split(':')
            if len(parts) != 2:
                QMessageBox.warning(self, self.localization_manager.tr("messages.error"),
                                    self.localization_manager.tr("messages.invalid_format"))
                return
            ip = parts[0].strip()
            port_text = parts[1].strip()
        else:
            # –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 5555 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            ip = input_text
            port_text = "5555"

        if not ip:
            QMessageBox.warning(self, self.localization_manager.tr("messages.error"),
                                self.localization_manager.tr("messages.enter_ip"))
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
        try:
            port = int(port_text)
            if port < 1 or port > 65535:
                QMessageBox.warning(self, self.localization_manager.tr("messages.error"),
                                    self.localization_manager.tr("messages.invalid_port"))
                return
        except ValueError:
            QMessageBox.warning(self, self.localization_manager.tr("messages.error"),
                                self.localization_manager.tr("messages.invalid_port"))
            return

        self.status_bar.showMessage(self.localization_manager.tr("messages.connecting", ip=ip), 0)
        success, message = self.adb_manager.connect_device(ip, port)

        if success:
            self.status_bar.showMessage(self.localization_manager.tr("messages.device_connected", ip=ip), 3000)
            self.refresh_devices()
        else:
            QMessageBox.warning(self, self.localization_manager.tr("messages.connection_error"), message)
            self.status_bar.showMessage("", 0)

    def disconnect_device(self, device_id):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        success, message = self.adb_manager.disconnect_device(device_id)
        if success:
            self.status_bar.showMessage(
                self.localization_manager.tr("messages.device_disconnected", device_id=device_id), 3000)
            self.refresh_devices()
        else:
            QMessageBox.warning(self, self.localization_manager.tr("messages.disconnection_error"), message)

    def remove_device(self, device_id):
        """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        self.config_manager.remove_device(device_id)
        self.status_bar.showMessage(self.localization_manager.tr("messages.device_removed", device_id=device_id), 3000)
        self.refresh_devices()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤

    def configure_device(self, device_id):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        current_settings = self.config_manager.get_device_settings(device_id)

        dialog = SettingsDialog(current_settings, self, self.localization_manager)
        dialog.set_current_device(device_id)  # –ü–µ—Ä–µ–¥–∞–µ–º ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–µ—Ä
        dialog.settings_changed.connect(
            lambda settings: self.save_device_settings(device_id, settings)
        )
        dialog.language_changed.connect(self.on_language_changed)
        dialog.exec_()

    def save_device_settings(self, device_id, settings):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        self.config_manager.set_device_settings(device_id, settings)
        self.status_bar.showMessage(self.localization_manager.tr("messages.settings_saved", device_id=device_id), 3000)

    def start_camera(self, device_id: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–º–µ—Ä—É –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        from ui.camera_settings_dialog import CameraSettingsDialog

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
        camera_settings = self.config_manager.get_camera_settings(device_id)

        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–µ—Ä—ã
        dialog = CameraSettingsDialog(device_id, camera_settings, self, self.localization_manager)
        dialog.settings_changed.connect(lambda settings: self.save_camera_settings(device_id, settings))
        dialog.start_camera.connect(lambda settings: self.launch_camera(device_id, settings))
        dialog.exec_()

    def save_camera_settings(self, device_id: str, settings):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã"""
        self.config_manager.set_camera_settings(device_id, settings)
        self.status_bar.showMessage(self.localization_manager.tr("messages.camera_settings_saved", device_id=device_id),
                                    3000)

    def launch_camera(self, device_id: str, settings):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–º–µ—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–∞–º–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if self.scrcpy_manager.is_camera_running(device_id):
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(self, self.localization_manager.tr("messages.error"),
                                self.localization_manager.tr("messages.camera_already_running", device_id=device_id))
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è high-speed: —Ç—Ä–µ–±—É–µ—Ç –≤—ã—Å–æ–∫–æ–≥–æ FPS (–æ–±—ã—á–Ω–æ >= 120)
        camera = settings.get('camera', {}) if isinstance(settings, dict) else {}
        if camera.get('camera_high_speed'):
            fps = int(camera.get('camera_fps') or 0)
            if fps < 120:
                from PyQt5.QtWidgets import QMessageBox
                QMessageBox.warning(self, self.localization_manager.tr("messages.error"),
                                    self.localization_manager.tr("messages.high_speed_fps_warning"))
                return

        success = self.scrcpy_manager.start_camera(device_id, settings)
        if success:
            self.status_bar.showMessage(self.localization_manager.tr("messages.camera_started", device_id=device_id),
                                        3000)
            self.update_devices_display(self.adb_manager.devices)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        else:
            self.status_bar.showMessage(
                self.localization_manager.tr("messages.camera_start_failed", device_id=device_id), 3000)

    def toggle_auto_refresh(self, enabled):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if enabled:
            self.refresh_timer.start(5000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            self.status_bar.showMessage(self.localization_manager.tr("messages.auto_refresh_enabled"), 2000)
        else:
            self.refresh_timer.stop()
            self.status_bar.showMessage(self.localization_manager.tr("messages.auto_refresh_disabled"), 2000)

    def show_scrcpy_settings(self, device_id: str = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scrcpy"""
        if device_id:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_settings = self.config_manager.get_device_settings(device_id)
            dialog = SettingsDialog(device_settings, self, self.localization_manager)
            dialog.set_current_device(device_id)
            dialog.settings_changed.connect(lambda settings: self.save_device_settings(device_id, settings))
            dialog.language_changed.connect(self.on_language_changed)
        else:
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            default_settings = self.config_manager.get_default_scrcpy_settings()
            dialog = SettingsDialog(default_settings, self, self.localization_manager)
            dialog.settings_changed.connect(self.save_default_settings)
            dialog.language_changed.connect(self.on_language_changed)

        dialog.exec_()

    def show_qr_connection(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ QR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        from ui.qr_connection_dialog import QRConnectionDialog
        
        dialog = QRConnectionDialog(
            adb_path=self.adb_manager.adb_path,
            parent=self,
            localization_manager=self.localization_manager
        )
        dialog.device_connected.connect(self._on_qr_device_connected)
        dialog.exec_()
        
    def _on_qr_device_connected(self, device_info: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ QR"""
        self.status_bar.showMessage(self.localization_manager.tr("messages.qr_device_connected"), 3000)
        self.refresh_devices()

    def save_default_settings(self, settings):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.config_manager.set_default_scrcpy_settings(settings)
        self.status_bar.showMessage(self.localization_manager.tr("messages.default_settings_saved"), 3000)

    def save_device_settings(self, device_id: str, settings):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        self.config_manager.set_device_settings(device_id, settings)
        self.status_bar.showMessage(self.localization_manager.tr("messages.settings_saved", device_id=device_id), 3000)

    def update_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ä"""
        devices_count = len(self.adb_manager.devices)
        scrcpy_count = len(self.scrcpy_manager.get_active_devices())

        self.devices_status.setText(self.localization_manager.tr("devices_status", count=devices_count))
        self.scrcpy_status.setText(self.localization_manager.tr("scrcpy_status", count=scrcpy_count))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    def on_devices_changed(self, devices):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        self.update_devices_display(devices)
        self.update_status()

    def on_scrcpy_started(self, device_id, process_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ scrcpy"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏
        self.status_bar.showMessage(self.localization_manager.tr("messages.scrcpy_started", device_id=device_id), 2000)
        self.update_status()
        self.refresh_devices()  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    def on_scrcpy_finished(self, device_id, exit_code):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è scrcpy"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if exit_code == 0:  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self.status_bar.showMessage(self.localization_manager.tr("messages.scrcpy_finished", device_id=device_id), 3000)
        # –ï—Å–ª–∏ exit_code != 0, –æ—à–∏–±–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞ —á–µ—Ä–µ–∑ stderr
        self.update_status()
        self.refresh_devices()  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    def on_scrcpy_error(self, device_id, error_message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ scrcpy"""
        QMessageBox.warning(self, self.localization_manager.tr("messages.scrcpy_error"),
                            f"{self.localization_manager.tr('messages.error')} –¥–ª—è {device_id}:\n{error_message}")
        self.update_status()
        self.refresh_devices()

    def on_scrcpy_stderr(self, device_id, error_output):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ stderr –æ—Ç scrcpy"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å—Ç–∞—Ç—É—Å–±–∞—Ä–µ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        error_text = f"[{device_id}]: {error_output}"
        self.status_bar.showMessage(error_text, 0)  # 0 = –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–±–∞—Ä
        self.status_bar.update()
        self.status_bar.repaint()

    def on_language_changed(self, language):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞"""
        self.localization_manager.set_language(language)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        reply = QMessageBox.question(
            self,
            self.localization_manager.tr("messages.info"),
            self.localization_manager.tr("messages.language_changed", language=language) +
            "\n" + self.localization_manager.tr("messages.restart_required") +
            "\n\n" + self.localization_manager.tr("messages.app_will_close"),
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.Yes
        )

        if reply == QMessageBox.Yes:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ LocalizationManager)
            self.close()

    # –£–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã scrcpy
        self.scrcpy_manager.stop_all_scrcpy()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.config_manager.save_config()

        event.accept()
