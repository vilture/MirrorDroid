import json
import os
from typing import Dict, Any, List

from .utils import debug_print


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self, config_file: str = "config.json"):
        self.config_file = config_file
        self.config = self._load_config()

    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.config_file):
            try:
                debug_print(f"üìÅ Loading configuration from {self.config_file}")
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                debug_print("‚úÖ Configuration loaded successfully")
                return config
            except (json.JSONDecodeError, IOError) as e:
                debug_print(f"‚ö†Ô∏è Error loading configuration: {e}, using default settings")
                pass

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "app_settings": {
                "always_on_top": True,
                "auto_scan_network": True,
                "scan_timeout": 5
            },
            "devices": [],
            "scrcpy_defaults": {
                "video": {
                    "max_size": 0,
                    "bit_rate": 8000000,
                    "max_fps": 0,
                    "codec": "h264",
                    "encoder": "",
                    "buffer_size": 0
                },
                "audio": {
                    "codec": "opus",
                    "bit_rate": 128000,
                    "buffer_size": 0,
                    "disable_audio": False
                },
                "display": {
                    "rotation": 0,
                    "crop": "",
                    "fullscreen": False,
                    "always_on_top": False,
                    "window_title": ""
                },
                "control": {
                    "show_touches": False,
                    "stay_awake": False,
                    "turn_screen_off": False
                },
                "record": {
                    "file": "",
                    "format": "mp4",
                    "time_limit": 0
                },
                "advanced": {
                    "keyboard": "disabled",
                    "mouse": "disabled",
                    "gamepad": False,
                    "otg": False,
                    "prefer_text": True,
                    "raw_key_events": False,
                    "no_key_repeat": False,
                    "disable_screensaver": False,
                    "forward_all_clicks": False,
                    "legacy_paste": False,
                    "power_off_on_close": False,
                    "power_on": False,
                    "start_fps": 0,
                    "lock_video_orientation": -1,
                    "display_id": 0,
                    "serial": "",
                    "tcpip": "",
                    "select_usb": False,
                    "select_tcpip": False,
                    "shortcut_mod": "lctrl,lalt,lsuper"
                }
            }
        }

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            debug_print(f"üíæ Saving configuration to {self.config_file}")
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            debug_print("‚úÖ Configuration saved successfully")
        except IOError as e:
            debug_print(f"‚ùå Error saving configuration: {e}")

    def get_app_setting(self, key: str, default=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return self.config.get("app_settings", {}).get(key, default)

    def set_app_setting(self, key: str, value: Any):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        debug_print(f"‚öôÔ∏è Setting app setting: {key} = {value}")
        if "app_settings" not in self.config:
            self.config["app_settings"] = {}
        self.config["app_settings"][key] = value
        self.save_config()

    def get_devices(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        return self.config.get("devices", [])

    def add_device(self, device_info: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫"""
        debug_print(f"üì± Adding device: {device_info.get('id', 'unknown')}")
        devices = self.get_devices()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º ID
        for i, device in enumerate(devices):
            if device.get("id") == device_info.get("id"):
                debug_print(f"üîÑ Updating existing device: {device_info.get('id')}")
                devices[i] = device_info
                break
        else:
            debug_print(f"‚ûï Adding new device: {device_info.get('id')}")
            devices.append(device_info)

        self.config["devices"] = devices
        self.save_config()

    def remove_device(self, device_id: str):
        """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        debug_print(f"üóëÔ∏è Removing device: {device_id}")
        devices = self.get_devices()
        self.config["devices"] = [d for d in devices if d.get("id") != device_id]
        self.save_config()

    def get_device_settings(self, device_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scrcpy –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        devices = self.get_devices()
        for device in devices:
            if device.get("id") == device_id:
                return device.get("scrcpy_settings", self.get_default_scrcpy_settings())
        return self.get_default_scrcpy_settings()

    def set_device_settings(self, device_id: str, settings: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scrcpy –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        debug_print(f"‚öôÔ∏è Saving scrcpy settings for device: {device_id}")
        devices = self.get_devices()
        for device in devices:
            if device.get("id") == device_id:
                device["scrcpy_settings"] = settings
                debug_print(f"üîÑ Updating settings for existing device: {device_id}")
                break
        else:
            # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            debug_print(f"‚ûï Creating new settings record for device: {device_id}")
            devices.append({
                "id": device_id,
                "scrcpy_settings": settings
            })

        self.config["devices"] = devices
        self.save_config()

    def get_default_scrcpy_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scrcpy –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self.config.get("scrcpy_defaults", {})

    def set_default_scrcpy_settings(self, settings: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scrcpy –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        debug_print("‚öôÔ∏è Saving default scrcpy settings")
        self.config["scrcpy_defaults"] = settings
        self.save_config()

    def get_camera_settings(self, device_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        devices = self.config.get("devices", [])
        for device in devices:
            if device["id"] == device_id:
                return device.get("camera_settings", self.get_default_camera_settings())

        # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return self.get_default_camera_settings()

    def set_camera_settings(self, device_id: str, settings: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        debug_print(f"üì∑ Saving camera settings for device: {device_id}")
        devices = self.config.get("devices", [])

        # –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–∫–µ
        device_found = False
        for device in devices:
            if device["id"] == device_id:
                device["camera_settings"] = settings
                debug_print(f"üîÑ Updating camera settings for existing device: {device_id}")
                device_found = True
                break

        if not device_found:
            # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            debug_print(f"‚ûï Creating new camera settings record for device: {device_id}")
            devices.append({
                "id": device_id,
                "camera_settings": settings
            })

        self.config["devices"] = devices
        self.save_config()

    def get_default_camera_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "camera_id": "",  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä
            "camera_size": "",  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–º–µ—Ä–æ–≤
            "camera_fps": 30,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π FPS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "camera_facing": "back",  # –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "camera_ar": "",
            "camera_high_speed": False,
            "camera_no_audio": False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ
        }
