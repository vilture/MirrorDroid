import json
import os

from PyQt5.QtCore import QObject, pyqtSignal

from .utils import debug_print


class LocalizationManager(QObject):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–æ–≤"""

    # –°–∏–≥–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    language_changed = pyqtSignal(str)

    def __init__(self, config_manager):
        super().__init__()
        self.config_manager = config_manager
        self.current_language = self.config_manager.get_app_setting("language", "ru")
        self.translations = {}
        self.load_translations()

    def load_translations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        import sys

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º PyInstaller –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
        is_frozen = getattr(sys, 'frozen', False) or hasattr(sys, '_MEIPASS')

        if is_frozen and hasattr(sys, '_MEIPASS'):
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø–∞–∫–æ–≤–∞–Ω–æ PyInstaller
            translations_dir = os.path.join(sys._MEIPASS, 'translations')
        else:
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
            translations_dir = os.path.join(os.path.dirname(__file__), '..', 'translations')

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        ru_file = os.path.join(translations_dir, 'ru.json')

        if os.path.exists(ru_file):
            try:
                with open(ru_file, 'r', encoding='utf-8') as f:
                    self.translations['ru'] = json.load(f)
            except Exception as e:
                self.translations['ru'] = {}
        else:
            self.translations['ru'] = {}

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
        en_file = os.path.join(translations_dir, 'en.json')

        if os.path.exists(en_file):
            try:
                with open(en_file, 'r', encoding='utf-8') as f:
                    self.translations['en'] = json.load(f)
            except Exception as e:
                self.translations['en'] = {}
        else:
            self.translations['en'] = {}

    def set_language(self, language: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫"""
        if language in self.translations:
            self.current_language = language
            self.config_manager.set_app_setting("language", language)
            debug_print(f"üåê Language changed to: {language}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
            self.language_changed.emit(language)
        else:
            debug_print(f"‚ö†Ô∏è Language {language} not supported")

    def get_language(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫"""
        return self.current_language

    def get_available_languages(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        return list(self.translations.keys())

    def tr(self, key: str, **kwargs) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
        current_translations = self.translations.get(self.current_language, {})

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–ª—é—á –ø–æ —Ç–æ—á–∫–∞–º –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
        parts = key.split('.')
        translation = current_translations

        try:
            for part in parts:
                if isinstance(translation, dict) and part in translation:
                    translation = translation[part]
                else:
                    # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ, –ø—Ä–æ–±—É–µ–º —Ä—É—Å—Å–∫–∏–π
                    if self.current_language != 'ru':
                        ru_translations = self.translations.get('ru', {})
                        ru_translation = ru_translations
                        try:
                            for ru_part in parts:
                                if isinstance(ru_translation, dict) and ru_part in ru_translation:
                                    ru_translation = ru_translation[ru_part]
                                else:
                                    ru_translation = key
                                    break
                            if isinstance(ru_translation, str):
                                translation = ru_translation
                                break
                        except (KeyError, TypeError):
                            pass

                    # –ï—Å–ª–∏ –∏ –≤ —Ä—É—Å—Å–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –∫–ª—é—á
                    if not isinstance(translation, str):
                        translation = key
                    break
        except (KeyError, TypeError):
            translation = key

        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á
        if not isinstance(translation, str):
            translation = key

        # –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if kwargs:
            try:
                translation = translation.format(**kwargs)
            except (KeyError, ValueError):
                debug_print(f"‚ö†Ô∏è Error formatting string '{key}' with parameters {kwargs}")

        return translation

    def get_translation(self, key: str, language: str = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        if language is None:
            language = self.current_language

        return self.translations.get(language, {}).get(key, key)
