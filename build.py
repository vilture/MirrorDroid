#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ MirrorDroid
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –û–° –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç
"""
import os
import platform
import shutil
import subprocess
import sys
from pathlib import Path


def get_os_info():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –û–°"""
    system = platform.system().lower()
    machine = platform.machine().lower()

    print(f"–°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
    print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")
    print(f"Python: {sys.version}")

    return system, machine


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PyInstaller
    try:
        result = subprocess.run([sys.executable, '-m', 'PyInstaller', '--version'],
                                capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"PyInstaller: {result.stdout.strip()}")
        else:
            print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyInstaller...")
            subprocess.run([sys.executable, '-m', 'pip', 'install', 'pyinstaller'], check=True)
    except (subprocess.TimeoutExpired, FileNotFoundError, subprocess.CalledProcessError):
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyInstaller...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'pyinstaller'], check=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Pillow –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∫–æ–Ω–æ–∫
    try:
        result = subprocess.run([sys.executable, '-c', 'import PIL'],
                                capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("Pillow –Ω–∞–π–¥–µ–Ω")
        else:
            print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Pillow –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∫–æ–Ω–æ–∫...")
            subprocess.run([sys.executable, '-m', 'pip', 'install', 'Pillow'], check=True)
    except (subprocess.TimeoutExpired, FileNotFoundError, subprocess.CalledProcessError):
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Pillow –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∫–æ–Ω–æ–∫...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'Pillow'], check=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    app_dir = Path("app")
    if not app_dir.exists():
        print("–ü–∞–ø–∫–∞ app/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False

    system, _ = get_os_info()

    if system == 'windows':
        win_dir = app_dir / "win"
        if not win_dir.exists():
            print("–ü–∞–ø–∫–∞ app/win/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        print("Windows –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    else:
        linux_dir = app_dir / "linux"
        if not linux_dir.exists():
            print("–ü–∞–ø–∫–∞ app/linux/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        print("Linux –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")

    return True


def clean_build():
    """–û—á–∏—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏"""
    print("–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫...")

    dirs_to_clean = ['dist', 'build']
    files_to_clean = ['*.spec']

    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"–£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_name}")

    for pattern in files_to_clean:
        for file_path in Path('.').glob(pattern):
            file_path.unlink()
            print(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")


def build_application():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    system, machine = get_os_info()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∫–∏
    if system == 'windows':
        app_name = "MirrorDroid"
        icon_path = "app/icon.png"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
        add_data = "app;app"
        print("–°–±–æ—Ä–∫–∞ –¥–ª—è Windows...")
        print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∫–æ–Ω–∫–∞: app/icon.png")
    else:
        app_name = "MirrorDroid"
        icon_path = "app/icon.png"
        add_data = "app:app"
        print("–°–±–æ—Ä–∫–∞ –¥–ª—è Linux...")

    # –ö–æ–º–∞–Ω–¥–∞ PyInstaller
    cmd = [
        sys.executable, '-m', 'PyInstaller',
        '--onefile',
        '--windowed',
        f'--name={app_name}',
        f'--icon={icon_path}',
        f'--add-data={add_data}',
        '--hidden-import=PyQt5.QtCore',
        '--hidden-import=PyQt5.QtWidgets',
        '--hidden-import=PyQt5.QtGui',
        '--hidden-import=json',
        '--hidden-import=subprocess',
        '--hidden-import=threading',
        '--hidden-import=time',
        '--hidden-import=os',
        '--hidden-import=sys',
        '--hidden-import=pathlib',
        '--hidden-import=platform',
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        '--hidden-import=core.localization',
        '--hidden-import=core.config_manager',
        '--hidden-import=core.adb_manager',
        '--hidden-import=core.scrcpy_manager',
        '--hidden-import=core.path_manager',
        '--hidden-import=core.utils',
        '--hidden-import=ui.main_window',
        '--hidden-import=ui.settings_dialog',
        '--hidden-import=ui.camera_settings_dialog',
        '--hidden-import=ui.device_widget',
        'main.py'
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    if system == 'windows':
        cmd.extend([
            '--add-data=translations;translations'
        ])
    else:
        cmd.extend([
            '--add-data=translations:translations'
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º Windows-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if system == 'windows':
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –≤ –ø–∞–ø–∫—É Windows –¥–ª—è scrcpy
        import shutil
        win_icon_path = os.path.join('app', 'win', 'icon.png')
        if not os.path.exists(win_icon_path):
            shutil.copy2('app/icon.png', win_icon_path)
            print(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞ –≤ {win_icon_path}")

        cmd.extend([
            '--add-binary=app\\win\\*.dll;.',
            '--collect-all=PyQt5',
            '--collect-all=PyQt5.QtCore',
            '--collect-all=PyQt5.QtWidgets',
            '--collect-all=PyQt5.QtGui'
        ])

    print("–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")

    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True, app_name
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
        print(f"–í—ã–≤–æ–¥: {e.stdout}")
        print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return False, None


def check_result(app_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–±–æ—Ä–∫–∏"""
    system, _ = get_os_info()

    if system == 'windows':
        exe_path = Path("dist") / "MirrorDroid.exe"
    else:
        exe_path = Path("dist") / "MirrorDroid"

    if exe_path.exists():
        size = exe_path.stat().st_size
        size_mb = size / (1024 * 1024)

        print(f"–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {exe_path}")
        print(f"–†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")

        # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –Ω–∞ Linux
        if system != 'windows':
            os.chmod(exe_path, 0o755)
            print("–§–∞–π–ª —Å–¥–µ–ª–∞–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º")

        return True
    else:
        print(f"–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exe_path}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ MirrorDroid")
    print("=" * 50)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –û–°
    system, machine = get_os_info()
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        print("‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã!")
        sys.exit(1)
    print()

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏
    clean_build()
    print()

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    success, app_name = build_application()
    if not success:
        print("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        sys.exit(1)
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if check_result(app_name):
        print()
        print("üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 50)

        system, _ = get_os_info()
        if system == 'windows':
            print("–î–ª—è –∑–∞–ø—É—Å–∫–∞:")
            print("  dist\\MirrorDroid.exe")
            print("–∏–ª–∏")
            print("  cd dist && MirrorDroid.exe")
        else:
            print("–î–ª—è –∑–∞–ø—É—Å–∫–∞:")
            print("  ./dist/MirrorDroid")
            print("–∏–ª–∏")
            print("  cd dist && ./MirrorDroid")

        print()
        print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã")
    else:
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        sys.exit(1)


if __name__ == "__main__":
    main()
